{{- if and .Values.worker.enabled (or (not .Values.web.enabled) (include "concourse.host" .)) -}}
{{- if eq .Values.worker.mode "deployment" }}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "concourse.worker.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: worker
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.worker.replicaCount }}
  {{- if .Values.worker.updateStrategy }}
  strategy: {{- toYaml .Values.worker.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: worker
  template:
    metadata:
      {{- if .Values.worker.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.worker.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: worker
        {{- if .Values.worker.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.worker.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "concourse.worker.serviceAccountName" . }}
      {{- include "imagePullSecrets" . | nindent 6 }}
      {{- if .Values.worker.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.worker.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.worker.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.worker.affinity "context" $) | nindent 8 }}
       {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.worker.podAffinityPreset "component" "worker" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.worker.podAntiAffinityPreset "component" "worker" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.worker.nodeAffinityPreset.type "key" .Values.worker.nodeAffinityPreset.key "values" .Values.worker.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.worker.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.worker.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.worker.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.worker.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.worker.priorityClassName }}
      priorityClassName: {{ .Values.worker.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.worker.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.worker.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if and (.Values.volumePermissions.enabled) (.Values.worker.persistence.enabled) }}
        - name: volume-permissions
          image: {{ include "concourse.volumePermissions.image" . }}
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | quote }}
          command:
            - sh
            - -c
            - |
              mkdir -p "/bitnami/concourse"
              chown -R "{{ .Values.worker.containerSecurityContext.runAsUser }}:{{ .Values.web.podSecurityContext.fsGroup }}" "/bitnami/concourse"
          {{- if .Values.volumePermissions.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.volumePermissions.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.volumePermissions.resources }}
          resources: {{- toYaml .Values.volumePermissions.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
        {{- end }}
        {{- if .Values.worker.initContainers }}
          {{- include "common.tplvalues.render" (dict "value" .Values.worker.initContainers "context" $) | nindent 8 }}
        {{- end }}
      containers:
        - name: concourse
          image: {{ template "concourse.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.worker.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.worker.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.worker.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.worker.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.worker.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.worker.command "context" $) | nindent 12 }}
          {{- else }}
          command:
            - /opt/bitnami/concourse/bin/concourse
          {{- end }}
          {{- if .Values.worker.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.worker.args "context" $) | nindent 12 }}
          {{- else }}
          args:
            - worker
          {{- end }}
          env:
            - name: CONCOURSE_TSA_PUBLIC_KEY
              value: "/bitnami/concourse/concourse-keys/host_key.pub"
            - name: CONCOURSE_TSA_WORKER_PRIVATE_KEY
              value: "/bitnami/concourse/concourse-keys/worker_key"
            - name: CONCOURSE_WORK_DIR
              value: "/bitnami/concourse/workdir"
            - name: CONCOURSE_HEALTHCHECK_BIND_PORT
              value: {{ .Values.worker.healthCheckContainerPort | quote }}
            {{- if .Values.worker.logLevel }}
            - name: CONCOURSE_LOG_LEVEL
              value: {{ .Values.worker.logLevel | quote }}
            {{- end }}
            - name: CONCOURSE_TSA_HOST
              value: {{ template "concourse.web.tsa.address" . }}
            {{- if .Values.worker.bindIp }}
            - name: CONCOURSE_BIND_IP
              value: {{ .Values.worker.bindIp | quote }}
            {{- end }}
            {{- if .Values.worker.containerPort }}
            - name: CONCOURSE_BIND_PORT
              value: {{ .Values.worker.containerPort | quote }}
            {{- end }}
            {{- if .Values.worker.baggageclaim.logLevel }}
            - name: CONCOURSE_BAGGAGECLAIM_LOG_LEVEL
              value: {{ .Values.worker.baggageclaim.logLevel | quote }}
            {{- end }}
            {{- if .Values.worker.baggageclaim.bindIp }}
            - name: CONCOURSE_BAGGAGECLAIM_BIND_IP
              value: {{ .Values.worker.baggageclaim.bindIp | quote }}
            {{- end }}
            {{- if .Values.worker.baggageclaim.containerPort }}
            - name: CONCOURSE_BAGGAGECLAIM_BIND_PORT
              value: {{ .Values.worker.baggageclaim.containerPort | quote }}
            {{- end }}
            {{- if .Values.worker.baggageclaim.debugbindIp }}
            - name: CONCOURSE_BAGGAGECLAIM_DEBUG_BIND_IP
              value: {{ .Values.worker.baggageclaim.debugbindIp | quote }}
            {{- end }}
            {{- if .Values.worker.baggageclaim.debugContainerPort }}
            - name: CONCOURSE_BAGGAGECLAIM_DEBUG_BIND_PORT
              value: {{ .Values.worker.baggageclaim.debugContainerPort | quote }}
            {{- end }}
            {{- if .Values.worker.baggageclaim.volumes }}
            - name: CONCOURSE_BAGGAGECLAIM_VOLUMES
              value: {{ .Values.worker.baggageclaim.volumes | quote }}
            {{- end }}
            {{- if .Values.worker.baggageclaim.driver }}
            - name: CONCOURSE_BAGGAGECLAIM_DRIVER
              value: {{ .Values.worker.baggageclaim.driver | quote }}
            {{- end }}
            {{- if .Values.worker.baggageclaim.btrfsBin }}
            - name: CONCOURSE_BAGGAGECLAIM_BTRFS_BIN
              value: {{ .Values.worker.baggageclaim.btrfsBin | quote }}
            {{- end }}
            {{- if .Values.worker.baggageclaim.mkfsBin }}
            - name: CONCOURSE_BAGGAGECLAIM_MKFS_BIN
              value: {{ .Values.worker.baggageclaim.mkfsBin | quote }}
            {{- end }}
            {{- if .Values.worker.baggageclaim.overlaysDir }}
            - name: CONCOURSE_BAGGAGECLAIM_OVERLAYS_DIR
              value: {{ .Values.worker.baggageclaim.overlaysDir | quote }}
            {{- end }}
            {{- if .Values.worker.baggageclaim.disableUserNamespaces }}
            - name: CONCOURSE_BAGGAGECLAIM_DISABLE_USER_NAMESPACES
              value: {{ .Values.worker.baggageclaim.disableUserNamespaces | quote }}
            {{- end }}
            {{- if .Values.worker.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.worker.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.worker.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.worker.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.worker.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.worker.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.worker.resources }}
          resources: {{- toYaml .Values.worker.resources | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.worker.containerPort }}
            - name: healthz
              containerPort: {{ .Values.worker.healthCheckContainerPort }}
          {{- if .Values.worker.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: "/"
              port: healthz
            initialDelaySeconds: {{ .Values.worker.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.worker.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.worker.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.worker.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.worker.livenessProbe.successThreshold }}
          {{- else if .Values.worker.customLivenessProbe }}
          {{- else if .Values.worker.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.worker.customLivenessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.worker.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: "/"
              port: healthz
            initialDelaySeconds: {{ .Values.worker.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.worker.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.worker.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.worker.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.worker.readinessProbe.successThreshold }}
          {{- else if .Values.worker.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.worker.customReadinessProbe "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: concourse-work-dir
              mountPath: /bitnami/concourse/workdir
            - name: concourse-keys
              mountPath: /bitnami/concourse/concourse-keys
              readOnly: true
          {{- if .Values.worker.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.worker.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.worker.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.worker.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        # In this kind of deployment, the state is ephemeral
        - name: concourse-work-dir
          emptyDir: {}
        - name: concourse-keys
          secret:
            secretName: {{ include "concourse.worker.secretName" . }}
            defaultMode: 0400
        {{- if .Values.worker.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.worker.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
{{- end }}
{{- end }}
