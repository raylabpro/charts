{{- if and .Values.web.enabled (include "concourse.host" .) -}}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "concourse.web.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: web
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.web.replicaCount }}
  {{- if .Values.web.updateStrategy }}
  strategy: {{- toYaml .Values.web.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: web
  template:
    metadata:
      {{- if .Values.web.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.web.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: web
        {{- if .Values.web.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.web.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "concourse.web.serviceAccountName" . }}
      {{- include "imagePullSecrets" . | nindent 6 }}
      {{- if .Values.web.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.web.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.web.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.web.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.web.podAffinityPreset "component" "web" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.web.podAntiAffinityPreset "component" "web" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.web.nodeAffinityPreset.type "key" .Values.web.nodeAffinityPreset.key "values" .Values.web.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.web.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.web.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.web.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.web.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.web.priorityClassName }}
      priorityClassName: {{ .Values.web.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.web.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.web.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if and .Values.volumePermissions.enabled }}
        - name: volume-permissions
          image: {{ include "concourse.volumePermissions.image" . }}
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | quote }}
          command:
            - sh
            - -c
            - |
              mkdir -p "/bitnami/concourse"
              chown -R "{{ .Values.web.containerSecurityContext.runAsUser }}:{{ .Values.web.podSecurityContext.fsGroup }}" "/bitnami/concourse"
          securityContext:
            runAsUser: 0
          {{- if .Values.volumePermissions.resources }}
          resources: {{- toYaml .Values.volumePermissions.resources | nindent 12 }}
          {{- end }}
        {{- end }}
        {{- if .Values.postgresql.enabled }}
        # NOTE: The value postgresql.image is not available unless postgresql.enabled is not set. We could change this to use bitnami-shell if
        # it had the binary wait-for-port.
        # This init container is for avoiding CrashLoopback errors in the Hub container because the PostgreSQL container is not ready
        - name: wait-for-db
          image: {{ include "common.images.image" (dict "imageRoot" .Values.postgresql.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.postgresql.image.pullPolicy  }}
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              set -o errexit
              set -o nounset
              set -o pipefail

              . /opt/bitnami/scripts/libos.sh
              . /opt/bitnami/scripts/liblog.sh
              . /opt/bitnami/scripts/libpostgresql.sh

              check_postgresql_connection() {
                  echo "SELECT 1" | postgresql_remote_execute "$POSTGRESQL_CLIENT_DATABASE_HOST" "$POSTGRESQL_CLIENT_DATABASE_PORT_NUMBER" "$POSTGRESQL_CLIENT_DATABASE_NAME" "$POSTGRESQL_CLIENT_POSTGRES_USER" "$POSTGRESQL_CLIENT_CREATE_DATABASE_PASSWORD"
              }

              info "Connecting to the PostgreSQL instance $POSTGRESQL_CLIENT_DATABASE_HOST:$POSTGRESQL_CLIENT_DATABASE_PORT_NUMBER"
              if ! retry_while "check_postgresql_connection"; then
                  error "Could not connect to the database server"
                  return 1
              else
                  info "Connected to the PostgreSQL instance"
              fi
          {{- if .Values.web.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.web.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          env:
            - name: POSTGRESQL_CLIENT_DATABASE_HOST
              value: {{ ternary (include "concourse.database.host" .) .Values.externalDatabase.host .Values.postgresql.enabled | quote }}
            - name: POSTGRESQL_CLIENT_DATABASE_NAME
              value: {{ ternary .Values.postgresql.postgresqlDatabase .Values.externalDatabase.port .Values.postgresql.enabled }}
            - name: POSTGRESQL_CLIENT_DATABASE_PORT_NUMBER
              value: {{ ternary "5432" .Values.externalDatabase.port .Values.postgresql.enabled | quote}}
            - name: POSTGRESQL_CLIENT_CREATE_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "concourse.postgresql.secretName" . }}
                  key: {{ include "concourse.database.existingsecret.key" . }}
            - name: POSTGRESQL_CLIENT_POSTGRES_USER
              value: {{ ternary .Values.postgresql.postgresqlUsername .Values.externalDatabase.host .Values.postgresql.enabled | quote }}
        {{- end }}
        - name: db-migrate
          image: {{ template "concourse.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /opt/bitnami/concourse/bin/concourse
          args:
            - migrate
            - --migrate-to-latest-version
          env:
            - name: CONCOURSE_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "concourse.postgresql.secretName" . }}
                  key: {{ include "concourse.database.existingsecret.key" . }}
            - name: CONCOURSE_POSTGRES_DATABASE
              value: {{ ternary .Values.postgresql.postgresqlDatabase .Values.externalDatabase.database .Values.postgresql.enabled | quote }}
            - name: CONCOURSE_POSTGRES_HOST
              value: {{ ternary (include "concourse.database.host" .) .Values.externalDatabase.host .Values.postgresql.enabled | quote }}
            - name: CONCOURSE_POSTGRES_PORT
              value: {{ include "concourse.database.port" . | quote }}
            - name: CONCOURSE_POSTGRES_USER
              value: {{ ternary .Values.postgresql.postgresqlUsername .Values.externalDatabase.user .Values.postgresql.enabled | quote  }}
        {{- if .Values.web.initContainers }}
          {{- include "common.tplvalues.render" (dict "value" .Values.web.initContainers "context" $) | nindent 8 }}
        {{- end }}
      containers:
        - name: concourse
          image: {{ template "concourse.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.web.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.web.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.web.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.web.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.web.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.web.command "context" $) | nindent 12 }}
          {{- else }}
          command:
            - /opt/bitnami/concourse/bin/concourse
          {{- end }}
          {{- if .Values.web.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.web.args "context" $) | nindent 12 }}
          {{- else }}
          args:
            - web
          {{- end }}
          env:
            {{- if .Values.web.tsa.logLevel }}
            - name: CONCOURSE_TSA_LOG_LEVEL
              value: {{ .Values.web.tsa.logLevel | quote }}
            {{- end }}
            {{- if .Values.web.bindIp }}
            - name: CONCOURSE_BIND_IP
              value: {{ .Values.web.bindIp | quote }}
            {{- end }}
            {{- if .Values.web.tsa.bindIp }}
            - name: CONCOURSE_TSA_BIND_IP
              value: {{ .Values.web.tsa.bindIp | quote }}
            {{- end }}
            - name: CONCOURSE_TSA_BIND_PORT
              value: {{ .Values.web.tsa.containerPort | quote }}
            {{- if .Values.web.tsa.debugbindIp }}
            - name: CONCOURSE_TSA_DEBUG_BIND_IP
              value: {{ .Values.web.tsa.debugbindIp | quote }}
            {{- end }}
            {{- if .Values.web.tsa.debugContainerPort }}
            - name: CONCOURSE_TSA_DEBUG_BIND_PORT
              value: {{ .Values.web.tsa.debugContainerPort | quote }}
            {{- end }}
            - name: CONCOURSE_BIND_PORT
              value: {{ .Values.web.containerPort | quote }}
            - name: CONCOURSE_TSA_HOST_KEY
              value: "/bitnami/concourse/concourse-keys/host_key"
            - name: CONCOURSE_TSA_AUTHORIZED_KEYS
              value: "/bitnami/concourse/concourse-keys/worker_key.pub"
            - name: CONCOURSE_SESSION_SIGNING_KEY
              value: "/bitnami/concourse/concourse-keys/session_signing_key"
            {{- if .Values.web.logLevel }}
            - name: CONCOURSE_LOG_LEVEL
              value: {{ .Values.web.logLevel | quote }}
            {{- end }}
            {{- if .Values.web.tsa.heartbeatInterval }}
            - name: CONCOURSE_TSA_HEARTBEAT_INTERVAL
              value: {{ .Values.web.tsa.heartbeatInterval | quote }}
            {{- end }}
            - name: CONCOURSE_EXTERNAL_URL
              value: {{ include "concourse.host" . | quote }}
            - name: CONCOURSE_BIND_PORT
              value: {{ .Values.web.containerPort | quote }}
            {{- if .Values.web.peerAddress }}
            - name: CONCOURSE_PEER_ADDRESS
              value: {{ .Values.web.peerAddress | quote }}
            {{- else }}
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CONCOURSE_PEER_ADDRESS
              value: "$(POD_IP)"
            {{- end }}
            {{- if .Values.web.auth.mainTeam.localUser }}
            - name: CONCOURSE_MAIN_TEAM_LOCAL_USER
              value: {{ .Values.web.auth.mainTeam.localUser | quote }}
            {{- end }}
            {{- if .Values.web.auth.mainTeam.config }}
            - name: CONCOURSE_MAIN_TEAM_CONFIG
              value: /bitnami/concourse/conf/main-team.yml
            {{- end }}
            {{- if .Values.web.configRBAC }}
            - name: CONCOURSE_CONFIG_RBAC
              value: /bitnami/concourse/conf/config-rbac.yml
            {{- end }}
            {{- if .Values.web.baseResourceTypeDefaults }}
            - name: CONCOURSE_BASE_RESOURCE_TYPE_DEFAULTS
              value: /bitnami/concourse/conf/brt-defaults.yml
            {{- end }}
            {{- if .Values.secrets.localAuth.enabled }}
            - name: CONCOURSE_ADD_LOCAL_USER
              valueFrom:
                secretKeyRef:
                  name: {{ template "concourse.web.fullname" . }}
                  key: local-users
            {{- end }}
            {{- if .Values.web.clusterName }}
            - name: CONCOURSE_CLUSTER_NAME
              value: {{ .Values.web.clusterName | quote }}
            {{- end }}
            {{- if .Values.web.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.web.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
            {{- if .Values.web.enablePipelineInstances }}
            - name: CONCOURSE_ENABLE_PIPELINE_INSTANCES
              value: {{ .Values.web.enablePipelineInstances | quote }}
            {{- end }}
            {{- if .Values.web.enableAcrossStep }}
            - name: CONCOURSE_ENABLE_ACROSS_STEP
              value: {{ .Values.web.enableAcrossStep | quote }}
            {{- end }}
            {{- if .Values.web.auth.cookieSecure }}
            - name: CONCOURSE_COOKIE_SECURE
              value: {{ .Values.web.auth.cookieSecure | quote }}
            {{- end }}
            {{- if .Values.web.auth.duration }}
            - name: CONCOURSE_AUTH_DURATION
              value: {{ .Values.web.auth.duration | quote }}
            {{- end }}
            {{- if .Values.web.auth.passwordConnector }}
            - name: CONCOURSE_PASSWORD_CONNECTOR
              value: {{ .Values.web.auth.passwordConnector | quote }}
            {{- end }}
            {{- if .Values.web.enableCacheStreamedVolumes }}
            - name: CONCOURSE_ENABLE_CACHE_STREAMED_VOLUMES
              value: {{ .Values.web.enableCacheStreamedVolumes | quote }}
            {{- end }}
            {{- if .Values.web.tsa.gardenRequestTimeout }}
            - name: CONCOURSE_TSA_GARDEN_REQUEST_TIMEOUT
              value: {{ .Values.web.tsa.gardenRequestTimeout | quote }}
            {{- end }}
            - name: CONCOURSE_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "concourse.postgresql.secretName" . }}
                  key: {{ include "concourse.database.existingsecret.key" .}}
            - name: CONCOURSE_POSTGRES_DATABASE
              value: {{ ternary .Values.postgresql.postgresqlDatabase .Values.externalDatabase.database .Values.postgresql.enabled | quote }}
            - name: CONCOURSE_POSTGRES_HOST
              value: {{ ternary (include "concourse.database.host" .) .Values.externalDatabase.host .Values.postgresql.enabled | quote }}
            - name: CONCOURSE_POSTGRES_PORT
              value: {{ include "concourse.database.port" . | quote }}
            - name: CONCOURSE_POSTGRES_USER
              value: {{ ternary .Values.postgresql.postgresqlUsername .Values.externalDatabase.user .Values.postgresql.enabled | quote  }}
          ports:
            - name: http
              containerPort: {{ .Values.web.containerPort }}
            - name: tsa
              containerPort: {{ .Values.web.tsa.containerPort }}
            {{- if .Values.web.tls.enabled }}
            - name: https
              containerPort: {{ .Values.web.tls.containerPort }}
            {{- end }}
            {{- if .Values.web.tsa.debugContainerPort }}
            - name: http-debug
              containerPort: {{ .Values.web.tsa.debugContainerPort }}
            {{- end }}
          envFrom:
            {{- if .Values.web.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.web.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.web.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.web.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.web.resources }}
          resources: {{- toYaml .Values.web.resources | nindent 12 }}
          {{- end }}
          {{- if .Values.web.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.web.baseUrl | trimSuffix "/" }}/api/v1/info
              port: http
            initialDelaySeconds: {{ .Values.web.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.web.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.web.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.web.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.web.livenessProbe.successThreshold }}
          {{- else if .Values.web.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.web.customLivenessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.web.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.web.baseUrl | trimSuffix "/" }}/api/v1/info
              port: http
            initialDelaySeconds: {{ .Values.web.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.web.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.web.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.web.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.web.readinessProbe.successThreshold }}
          {{- else if .Values.web.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.web.customReadinessProbe "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: concourse-keys
              mountPath: /bitnami/concourse/concourse-keys
              readOnly: true
            {{- if .Values.secrets.teamAuthorizedKeys }}
            - name: team-authorized-keys
              mountPath: /bitnami/concourse/team-authorized-keys
              readOnly: true
            {{- end }}
          {{- if .Values.web.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.web.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.web.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.web.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: concourse-configuration
          configMap:
            name: {{ include "concourse.web.configmapName" . }}
        - name: concourse-keys
          secret:
            secretName: {{ include "concourse.web.secretName" .}}
            defaultMode: 0400
        {{- if .Values.secrets.teamAuthorizedKeys }}
        - name: team-authorized-keys
          secret:
            secretName: {{ include "concourse.web.secretName" }}
            defaultMode: 0400
        {{- end }}
        {{- if .Values.web.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.web.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
{{- end }}
